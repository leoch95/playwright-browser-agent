---
description:
globs:
alwaysApply: true
---
# Tech-Stack Best Practices & Development Guidelines

This rule aggregates the core engineering principles and stack-specific conventions that **must** be followed throughout the repository. It is intended as a living, single-source-of-truth for day-to-day implementation choices.

## Universal Coding Principles

* **SOLID** – design modules/classes so they have one responsibility, are open for extension but closed for modification, depend on abstractions, etc.
* **KISS** – prefer simple, readable implementations over cleverness.
* **DRY** – factor out duplication; extract helpers if a pattern appears ≥ 2×.

## Python Environment – **uv**

* The project **only** uses `uv` for Python version & dependency management. Never call `pip`, `venv`, or Poetry CLI directly.
  * Create env → `uv venv` (run from repo root).
  * Add dependency → `uv add <pkg>` – this updates `[project.dependencies]` in [pyproject.toml](mdc:pyproject.toml) **and** refreshes `uv.lock`.
  * Remove dependency → `uv remove <pkg>`.
  * Lock / install → `uv lock`, `uv sync`.
* Keep `.venv/` out of Git; ensure `.gitignore` contains it (already present).
* When editing docs or READMEs, shell snippets **must** use `uv` commands.
* For Docker integration, follow the official uv Docker guide – expose `/opt/venv` and omit `--system`.

## Packaging / Project Layout

* Source of truth for the CLI entry-point is [main.py](mdc:main.py) which wires Typer `app` from `cli.py`.
* Console script is declared in `[project.scripts]` within [pyproject.toml](mdc:pyproject.toml).
* Keep modules small (≤ 400 LOC); if a file grows beyond, split logically.

## Typer (CLI)

* All user-facing commands live in [cli.py](mdc:cli.py).
* Provide explicit flag types & defaults; surface `--help` examples.
* Stream output rather than buffering when possible (`rich` optional, not required).

## LangChain

* Build agents/tools in [agent.py](mdc:agent.py); keep prompts in [prompts.py](mdc:prompts.py).
* Always enable streaming for chat models.
* Catch and log tool exceptions, retry with `tenacity` if transient.

## LiteLLM

* Select provider & model via env/CLI; never hard-code keys.
* Errors exposing secrets to logs are CI blockers.

## Playwright-MCP

* Spawn Node subprocess lazily; register shutdown hooks via [utils.py](mdc:utils.py).
* Support `--headless` flag consistently across chat & batch.
* Screenshot path logic lives only in `prompts.build` to keep single responsibility.

## python-dotenv (Config)

* [config.py](mdc:config.py) loads `.env` **before** any SDKs are initialised to ensure keys are present.
* CLI flag overrides always win over `.env`.

## Testing & CI

* Prefer `pytest` + `pytest-asyncio`; fixtures should spin up isolated browser contexts.
* Tests create a **temporary** env via `uv venv --path .tmpvenv`.

## Documentation

* Any code snippet appearing in docs **must** be runnable verbatim in a fresh clone after `uv sync && uv run python -m pytest`.
* Link to upstream docs (e.g. Typer, LangChain, Playwright) for advanced usage rather than replicating them here.

---

Update or append to this rule if the stack evolves (new tool, new principle). All contributors are expected to comply.
