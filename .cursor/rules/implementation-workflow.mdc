---
description: Guidance for development or task implementation workflow
globs:
alwaysApply: false
---
# Implementation Workflow

This rule guides the systematic implementation of the Playwright Browser Agent according to [TASKS.adoc](mdc:TASKS.adoc).

## Implementation Process

1. **Follow tasks in order** - Implement tasks from [TASKS.adoc](mdc:TASKS.adoc) sequentially, following the task grouping structure
2. **Cross-reference documentation** - Always refer to [PRD.adoc](mdc:PRD.adoc) for product requirements and [DESIGN.adoc](mdc:DESIGN.adoc) for technical implementation details
3. **Update task status** - Mark tasks as complete using the status legend from [TASKS.adoc](mdc:TASKS.adoc):
   * `▢` → `✅` = Completed task
   * `▢` → `❌` = Failed task
   * `▢` → `❓` = Needs clarification
4. **MANDATORY: Request user approval** - After completing each task, explicitly ask the user to review and approve before moving on

## Implementation Checklist

For each task:

1. **Identify the task** - Select the next pending `▢` task from [TASKS.adoc](mdc:TASKS.adoc)
2. **Research requirements** - Find relevant details in [PRD.adoc](mdc:PRD.adoc) and [DESIGN.adoc](mdc:DESIGN.adoc)
3. **Implement solution** - Follow the design patterns and code snippets in [DESIGN.adoc](mdc:DESIGN.adoc)
4. **Update task status** - Change `▢` to the appropriate status (✅/❌/❓) in [TASKS.adoc](mdc:TASKS.adoc)
5. **CRITICAL: Request user review** - Always ask "Would you like to review this implementation before moving to the next task?" and wait for explicit approval

## Implementation Priority

Follow the exact grouping and sequence in [TASKS.adoc](mdc:TASKS.adoc):

1. Project Setup
2. Configuration Module (config.py)
3. CLI Interface (cli.py)
4. Agent Core (agent.py)
5. Prompts System (prompts.py)
6. Utility Functions (utils.py)
7. Testing
8. Documentation
9. Integration & Polish

## Code Standards

- Follow Python best practices as outlined in the tech-stack rule
- Maintain consistent style with code examples in [DESIGN.adoc](mdc:DESIGN.adoc)
- Ensure each module matches its specified responsibilities

## User Approval Protocol

- NEVER proceed to the next task without EXPLICIT user approval
- Multiple review iterations may be required - be patient and responsive to all feedback
- Implement ALL requested changes and seek approval again after each revision
- Consider approval ONLY received when user explicitly confirms with phrases like "approved", "looks good", "proceed to next task", etc.
- STOP and wait for user instruction if approval is ambiguous
- Provide a clear summary of what was implemented to help user review
- If user provides feedback without explicit approval, treat it as a request for changes
- Ask explicitly "Shall I proceed to the next task?" if user feedback is unclear
